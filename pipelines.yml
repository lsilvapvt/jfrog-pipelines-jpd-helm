template: true
valuesFilePath: ./values.yml

resources:
  - name: {{ .Values.myPipeline.resourcesPrefix }}git_resource
    type: GitRepo
    configuration:
      gitProvider: {{ .Values.myGitRepo.gitIntegration }}
      path: {{ .Values.myGitRepo.path }}
      branches:
        include: {{ .Values.myGitRepo.branch }}

  - name: {{ .Values.myPipeline.resourcesPrefix }}art_chart
    type: HelmChart
    configuration:
      sourceArtifactory: {{ .Values.myPipeline.artifactoryIntegration }}
      repository: {{ .Values.artifactoryChart.repository }}
      chart: {{ .Values.artifactoryChart.chartName }}
      version: {{ .Values.artifactoryChart.chartVersion }}

pipelines:
  - name: {{ .Values.myPipeline.name }}
    steps:
      - name: pre_helm_deploy
        type: Bash
        configuration:
          inputResources:
            - name: {{ .Values.myPipeline.resourcesPrefix }}git_resource
              trigger: false
          integrations:
            - name: {{ .Values.myKubernetes.kubernetesIntegration }}
            - name: {{ .Values.myPipeline.licenseIntegration }}
        execution:
          onExecute:
            - echo $res_{{ .Values.myPipeline.resourcesPrefix }}git_resource_resourcePath
            - ls -la
            - export MASTER_KEY=$(openssl rand -hex 32)
            - export JOIN_KEY=$(openssl rand -hex 32)
            - export POSTGRES_PASSWORD=$(openssl rand -hex 12)
            - export ADMIN_PASSWORD=$(openssl rand -hex 8)
            - kubectl config view
            - add_run_variables JPD_VALUES_FILE=$res_{{ .Values.myPipeline.resourcesPrefix }}git_resource_resourcePath/deployment/jpd-chart-values.yml MASTER_KEY=$MASTER_KEY JOIN_KEY=$JOIN_KEY POSTGRES_PASSWORD=$POSTGRES_PASSWORD ADMIN_PASSWORD=$ADMIN_PASSWORD
            - add_run_files $res_{{ .Values.myPipeline.resourcesPrefix }}git_resource_resourcePath/deployment/jpd-chart-values.yml jpd_values_file
            - env
            - sed -i "s/ARTIFACTORY_NAMESPACE/{{ .Values.artifactoryChart.namespace }}/g" $res_{{ .Values.myPipeline.resourcesPrefix }}git_resource_resourcePath/deployment/namespace.yml
            - cat $res_{{ .Values.myPipeline.resourcesPrefix }}git_resource_resourcePath/deployment/namespace.yml
            - kubectl apply -f $res_{{ .Values.myPipeline.resourcesPrefix }}git_resource_resourcePath/deployment/namespace.yml
            - sed -i "s/ARTIFACTORY_NAMESPACE/{{ .Values.artifactoryChart.namespace }}/g" $res_{{ .Values.myPipeline.resourcesPrefix }}git_resource_resourcePath/deployment/jpd-config-map.yml
            - cat $res_{{ .Values.myPipeline.resourcesPrefix }}git_resource_resourcePath/deployment/jpd-config-map.yml
            - kubectl apply -f $res_{{ .Values.myPipeline.resourcesPrefix }}git_resource_resourcePath/deployment/jpd-config-map.yml
            - echo "${int_{{ .Values.myPipeline.licenseIntegration }}_key}" > ./license.key
            - cat ./license.key
            - kubectl create secret generic jpdlicense -n {{ .Values.artifactoryChart.namespace }} --from-file=licensekey=./license.key
            - kubectl create secret generic jpdjoinkey -n {{ .Values.artifactoryChart.namespace }} --from-literal=join-key=${JOIN_KEY}
            - kubectl create secret generic jpdmasterkey -n {{ .Values.artifactoryChart.namespace }} --from-literal=master-key=${MASTER_KEY}
            - kubectl create secret generic jpdpostgresspwd -n {{ .Values.artifactoryChart.namespace }} --from-literal=postgres-pwd=${POSTGRES_PASSWORD}
            - kubectl create secret generic jpdadminpwd -n {{ .Values.artifactoryChart.namespace }} --from-literal=admin-pwd=${ADMIN_PASSWORD}

      - name: artifactory_deploy
        type: HelmDeploy
        configuration:
          helmVersion: 3
          releaseName: {{ .Values.artifactoryChart.releaseName }} 
          dryRun: true
          flags: {{ .Values.artifactoryChart.flags }} --set artifactory.admin.password=${ADMIN_PASSWORD} --set artifactory.masterKey=${MASTER_KEY} --set artifactory.joinKey=${JOIN_KEY} --set postgresql.postgresqlPassword=${POSTGRES_PASSWORD} -f $step_workspace_dir/jpdvalues.yml 
          # --set artifactory.masterKeySecretName=jpdmasterkey --set artifactory.joinKeySecretName=jpdjoinkey
          environmentVariables:
            HELM_NAMESPACE: {{ .Values.artifactoryChart.namespace }}          
          integrations:
            - name: {{ .Values.myKubernetes.kubernetesIntegration }}
          inputResources:
            - name: {{ .Values.myPipeline.resourcesPrefix }}art_chart
              trigger: false 
          inputSteps:
            - name: pre_helm_deploy
        execution:
          onStart:
            - restore_run_files jpd_values_file $step_workspace_dir/jpdvalues.yml 
            
      - name: post_deploy
        type: Bash
        configuration:
          inputResources:
            - name: {{ .Values.myPipeline.resourcesPrefix }}git_resource
              trigger: false
          integrations:
            - name: {{ .Values.myKubernetes.kubernetesIntegration }}
          inputSteps:
            - name: artifactory_deploy
        execution:
          onExecute:
            - |
              echo "The following secrets have been created in the targeted Kubernetes namespace:" &&
              echo "- jpdadminpwd: the generated password for the 'admin' user" &&
              echo "- jpdmasterkey: the generated master key for the platform deployment" &&
              echo "- jpdjoinkey: the generated join key for the platform deployment" &&
              echo "- jpdpostgresspwd: the generated password for postgresql databawe server" &&
              echo "- jpdlicense: the provided license key" &&
              echo "" &&
              echo "To access the instance, point to the IP allocated to the main service entry point:" &&
              echo "" &&
              echo "$(kubectl get services --namespace {{ .Values.artifactoryChart.namespace }})"
              # " -o jsonpath='{.status.loadBalancer.ingress[0].ip}'"
              # /router/api/v1/system/health

  - name: {{ .Values.myPipeline.deleteName }}
    steps:
      - name: pre_helm_delete
        type: Bash
        configuration:
          inputResources:
            - name: {{ .Values.myPipeline.resourcesPrefix }}git_resource
              trigger: false
          integrations:
            - name: {{ .Values.myKubernetes.kubernetesIntegration }}
        execution:
          onExecute:
            - helm3 ls -n {{ .Values.artifactoryChart.namespace }}
            - kubectl get ns
            # check deployment status until done or until timeout
            # get service IP 
            # 

      - name: helm_delete
        type: Bash
        configuration:
          # requiresApproval:
          #   timeoutSeconds: 43200
          #   approvers:
          #     - lucianos
          inputSteps:
            - name: pre_helm_delete
          inputResources:
            - name: {{ .Values.myPipeline.resourcesPrefix }}git_resource
              trigger: false
          integrations:
            - name: {{ .Values.myKubernetes.kubernetesIntegration }}
        execution:
          onExecute:
            - helm3 uninstall {{ .Values.artifactoryChart.releaseName }} -n {{ .Values.artifactoryChart.namespace }}
            - sleep 10
            - sed -i "s/ARTIFACTORY_NAMESPACE/{{ .Values.artifactoryChart.namespace }}/g" $res_{{ .Values.myPipeline.resourcesPrefix }}git_resource_resourcePath/deployment/namespace.yml
            - cat $res_{{ .Values.myPipeline.resourcesPrefix }}git_resource_resourcePath/deployment/namespace.yml
            - kubectl delete -f $res_{{ .Values.myPipeline.resourcesPrefix }}git_resource_resourcePath/deployment/namespace.yml
            - kubectl get ns 

